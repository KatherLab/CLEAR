[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "clear-radiology"
version = "1.0.0"
description = "CLEAR: Contrastive Learning-based Embeddings for Attention-based Radiology"
readme = "README.md"
requires-python = ">=3.8"
license = {text = "GPL-3.0"}
authors = [
    {name = "Marta Ligero", email = "marta.ligero@tu-dresden.de"},
    {name = "Tim Lenz", email = "tim.lenz@tu-dresden.de"},
    {name = "Georg WÃ¶lflein", email = "georg.woelflein@tu-dresden.de"},
    {name = "Omar S.M. El Nahhas", email = "omar.elnahhas@tu-dresden.de"},
    {name = "Daniel Truhn", email = "daniel.truhn@rwth-aachen.de"},
    {name = "Jakob Nikolas Kather", email = "jakob_nikolas.kather@tu-dresden.de"},
]
keywords = ["radiology", "contrastive learning", "medical imaging", "deep learning", "attention", "SSL"]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Scientific/Engineering :: Medical Science Apps.",
]

dependencies = [
    # Core ML/DL frameworks
    "torch>=2.0.0",
    "torchvision>=0.15.0",
    "timm>=0.9.8",
    "torchmetrics>=1.0.0",
    
    # Data handling and processing
    "numpy>=1.21.0",
    "pandas>=1.5.0",
    "h5py>=3.7.0",
    "pillow>=9.0.0",
    
    # Scientific computing
    "scikit-learn>=1.1.0",
    "scipy>=1.9.0",
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    
    # Progress bars and utilities
    "tqdm>=4.64.0",
    "tensorboard>=2.10.0",
    
    # Medical imaging specific
    "open-clip-torch>=2.23.0",  # For BiomedCLIP
    
    # Optional but recommended
    "jupyter>=1.0.0",
    "ipykernel>=6.15.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
]

# Additional model dependencies
models = [
    "transformers>=4.20.0",  # For additional transformer models
    "einops>=0.6.0",  # For tensor operations
]

# Visualization and analysis
viz = [
    "plotly>=5.10.0",
    "dash>=2.6.0",
    "streamlit>=1.12.0",
]

# Medical imaging tools
medical = [
    "SimpleITK>=2.2.0",
    "nibabel>=4.0.0",
    "pydicom>=2.3.0",
]

# All optional dependencies
all = [
    "clear-radiology[dev,models,viz,medical]"
]

[project.urls]
Homepage = "https://github.com/KatherLab/CLEAR"
Repository = "https://github.com/KatherLab/CLEAR"
Documentation = "https://github.com/KatherLab/CLEAR#readme"
"Bug Tracker" = "https://github.com/KatherLab/CLEAR/issues"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]
include = ["*"]

[tool.setuptools.package-data]
"*" = ["*.yaml", "*.yml", "*.json", "*.txt"]

# Black code formatting
[tool.black]
line-length = 100
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
  | src/VMamba
  | src/MambaOut
)/
'''

# isort import sorting
[tool.isort]
profile = "black"
line_length = 100
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
skip_glob = ["src/VMamba/*", "src/MambaOut/*"]

# Pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=html",
    "--cov-report=term-missing",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "gpu: marks tests that require GPU",
    "integration: marks tests as integration tests",
]

# MyPy type checking
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "torchvision.*",
    "timm.*",
    "sklearn.*",
    "matplotlib.*",
    "seaborn.*",
    "h5py.*",
    "PIL.*",
    "tqdm.*",
    "open_clip.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src"]
omit = [
    "src/VMamba/*",
    "src/MambaOut/*",
    "tests/*",
    "*/test_*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Flake8 linting
[tool.flake8]
max-line-length = 100
extend-ignore = ["E203", "W503", "E501"]
per-file-ignores = [
    "__init__.py:F401",
    "src/VMamba/*:E,W,F",
    "src/MambaOut/*:E,W,F",
]
exclude = [
    ".git",
    "__pycache__",
    "build",
    "dist",
    ".eggs",
    "src/VMamba",
    "src/MambaOut",
]
